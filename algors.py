# -*- coding: utf-8 -*-
"""ALgo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xQSozlUI0SPdkCkDdGSCTtM7t7c7HJ-D
"""


from astropy.io import fits
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from astropy.stats import sigma_clipped_stats
import math as m
from sklearn.cluster import DBSCAN
from scipy.spatial import distance_matrix

from photutils.detection import DAOStarFinder, find_peaks
from photutils.aperture import CircularAperture, CircularAnnulus, ApertureStats, aperture_photometry

from finalmethods import sources, zeropoint, extime, Mag_sun, L_sun, distance_m31_pc

def x_y_flux_peak(section):
 sources_ = sources(section)
 x = sources_['xcentroid']
 y = sources_['ycentroid']
 flux = sources_['flux']
 peaks = sources_['peak']
 return x, y, flux, peaks

def coords(section):
  x, y, flux, peaks = x_y_flux_peak(section)
  return np.column_stack((x, y))

def eps(section):
  dist_mat = distance_matrix(coords(section), coords(section))
  np.fill_diagonal(dist_mat, np.inf)
  min_dists = dist_mat.min(axis=1)
  return np.percentile(min_dists, 24)

def merged(section):
  dbscan = DBSCAN(eps=eps(section), min_samples=1).fit(coords(section))
  labels = dbscan.labels_
  x, y, flux, peaks = x_y_flux_peak(section)
  mx, my, mflux, mpeaks = [], [], [], []
  for label in np.unique(labels):
    idx = np.where(labels == label)[0]
    brightest_idx = idx[np.argmax([flux[i] for i in idx])]
    cluster_flux = flux[idx]
    cluster_peak = peaks[idx]
    mx.append(x[brightest_idx])
    my.append(y[brightest_idx])
    mflux.append(np.sum(cluster_flux))
    mpeaks.append(np.max(cluster_peak))
  return mx, my, mflux, mpeaks

def mpositions(section):
  mx, my, mflux, mpeaks = merged(section)
  return np.transpose((mx, my))

def mx(section):
    mx_, my_, mflux, mpeaks = merged(section)
    return mx_

def my(section):
    mx_, my_, mflux, mpeaks = merged(section)
    return my_

def unclustered_apertures(section):
    return CircularAperture(mpositions(section), r = 10.45)

def unclustered_annulus_apertures(section):
    return CircularAnnulus(mpositions(section), r_in=20.45, r_out=30.45)

def new_stars_data(section):
    aperstats = ApertureStats(section, unclustered_annulus_apertures(section))
    bkg_mean = aperstats.mean
    aperture_area = unclustered_apertures(section).area_overlap(section)
    total_bkg = bkg_mean * aperture_area
    star_data = aperture_photometry(section, unclustered_apertures(section))
    star_data['total_bkg'] = total_bkg
    for col in star_data.colnames:
        star_data[col].info.format = '%.8g'
    magnitudes = []
    for line in star_data:
        magnitudes.append(zeropoint - 2.5 * (m.log10(abs(line[3] - line[4]) / extime)))
    star_data['magnitude'] = magnitudes
    return star_data

def size_star(section):
  mx, my, mflux, mpeaks = merged(section)
  size_ = []
  for i in range(len(mflux)):
    size_.append(mflux[i]/mpeaks[i])
  return size_

def luminosity(section):
  mag = new_stars_data(section)['magnitude']
  M = mag - 5*(m.log10(distance_m31_pc) - 1)
  luminosity_ = []
  for i in range(len(M)):
    luminosity_.append(L_sun*(10**(-0.4*(M[i] - Mag_sun))))
  return luminosity_
